{"version":3,"file":"sdk.js","mappings":"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","sources":["webpack://dictation_support/webpack/universalModuleDefinition","webpack://dictation_support/webpack/bootstrap","webpack://dictation_support/./src/dictation_device_base.ts","webpack://dictation_support/webpack/runtime/define property getters","webpack://dictation_support/webpack/runtime/hasOwnProperty shorthand","webpack://dictation_support/webpack/runtime/make namespace object","webpack://dictation_support/./src/foot_control_device.ts","webpack://dictation_support/./src/powermic_3_device.ts","webpack://dictation_support/./src/speechmike_gamepad_device.ts","webpack://dictation_support/./src/speechmike_hid_device.ts","webpack://dictation_support/./src/dictation_device_manager.ts","webpack://dictation_support/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {DictationDevice} from './dictation_device';\r\n\r\nexport enum ImplementationType {\r\n  SPEECHMIKE_HID = 0,\r\n  SPEECHMIKE_GAMEPAD = 1,\r\n  FOOT_CONTROL = 2,\r\n  POWERMIC_3 = 3,\r\n}\r\n\r\nexport enum DeviceType {\r\n  UNKNOWN = 0,\r\n  FOOT_CONTROL_ACC_2310_2320 = 6212,\r\n  FOOT_CONTROL_ACC_2330 = 2330,\r\n  SPEECHMIKE_LFH_3200 = 3200,\r\n  SPEECHMIKE_LFH_3210 = 3210,\r\n  SPEECHMIKE_LFH_3220 = 3220,\r\n  SPEECHMIKE_LFH_3300 = 3300,\r\n  SPEECHMIKE_LFH_3310 = 3310,\r\n  SPEECHMIKE_LFH_3500 = 3500,\r\n  SPEECHMIKE_LFH_3510 = 3510,\r\n  SPEECHMIKE_LFH_3520 = 3520,\r\n  SPEECHMIKE_LFH_3600 = 3600,\r\n  SPEECHMIKE_LFH_3610 = 3610,\r\n  SPEECHMIKE_SMP_3700 = 3700,\r\n  SPEECHMIKE_SMP_3710 = 3710,\r\n  SPEECHMIKE_SMP_3720 = 3720,\r\n  SPEECHMIKE_SMP_3800 = 3800,\r\n  SPEECHMIKE_SMP_3810 = 3810,\r\n  SPEECHMIKE_SMP_4000 = 4000,\r\n  SPEECHMIKE_SMP_4010 = 4010,\r\n  SPEECHONE_PSM_6000 = 6001,\r\n  POWERMIC_3 = 4097,\r\n  POWERMIC_4 = 100,\r\n}\r\n\r\nexport enum ButtonEvent {\r\n  NONE = 0,\r\n  REWIND = 1 << 0,\r\n  PLAY = 1 << 1,\r\n  FORWARD = 1 << 2,\r\n  INS_OVR = 1 << 4,\r\n  RECORD = 1 << 5,\r\n  COMMAND = 1 << 6,\r\n  STOP = 1 << 8,\r\n  INSTR = 1 << 9,\r\n  F1_A = 1 << 10,\r\n  F2_B = 1 << 11,\r\n  F3_C = 1 << 12,\r\n  F4_D = 1 << 13,\r\n  EOL_PRIO = 1 << 14,\r\n  TRANSCRIBE = 1 << 15,\r\n  TAB_BACKWARD = 1 << 16,\r\n  TAB_FORWARD = 1 << 17,\r\n  CUSTOM_LEFT = 1 << 18,\r\n  CUSTOM_RIGHT = 1 << 19,\r\n  ENTER_SELECT = 1 << 20,\r\n  SCAN_END = 1 << 21,\r\n  SCAN_SUCCESS = 1 << 22,\r\n}\r\n\r\nexport type ButtonEventListener =\r\n    (device: DictationDevice, bitMask: ButtonEvent) => void|Promise<void>;\r\n\r\nexport abstract class DictationDeviceBase {\r\n  private static next_id = 0;\r\n\r\n  readonly id = DictationDeviceBase.next_id++;\r\n  abstract readonly implType: ImplementationType;\r\n\r\n  protected readonly buttonEventListeners = new Set<ButtonEventListener>();\r\n  protected lastBitMask = 0;\r\n\r\n  protected readonly onInputReportHandler = (event: HIDInputReportEvent) =>\r\n      this.onInputReport(event);\r\n\r\n  protected constructor(readonly hidDevice: HIDDevice) {}\r\n\r\n  async init() {\r\n    this.hidDevice.addEventListener('inputreport', this.onInputReportHandler);\r\n\r\n    if (this.hidDevice.opened === false) {\r\n      await this.hidDevice.open();\r\n    }\r\n  }\r\n\r\n  async shutdown(closeDevice = true) {\r\n    this.hidDevice.removeEventListener(\r\n        'inputreport', this.onInputReportHandler);\r\n\r\n    if (closeDevice) {\r\n      await this.hidDevice.close();\r\n    }\r\n\r\n    this.buttonEventListeners.clear();\r\n  }\r\n\r\n  addButtonEventListener(listener: ButtonEventListener) {\r\n    this.buttonEventListeners.add(listener);\r\n  }\r\n\r\n  protected async onInputReport(event: HIDInputReportEvent) {\r\n    const data = event.data;\r\n    await this.handleButtonPress(data);\r\n  }\r\n\r\n  protected async handleButtonPress(data: DataView) {\r\n    const buttonMappings = this.getButtonMappings();\r\n    const inputBitMask = this.getInputBitmask(data);\r\n    let outputBitMask = 0;\r\n    for (const [buttonEvent, buttonMapping] of buttonMappings) {\r\n      if (inputBitMask & buttonMapping) outputBitMask |= buttonEvent;\r\n    }\r\n\r\n    if (outputBitMask === this.lastBitMask) return;\r\n    this.lastBitMask = outputBitMask;\r\n\r\n    outputBitMask = this.filterOutputBitMask(outputBitMask);\r\n\r\n    await Promise.all([...this.buttonEventListeners].map(\r\n        listener => listener(this.getThisAsDictationDevice(), outputBitMask)));\r\n  }\r\n\r\n  protected filterOutputBitMask(outputBitMask: number): number {\r\n    return outputBitMask;  // default = no filtering\r\n  }\r\n\r\n  abstract getDeviceType(): DeviceType;\r\n  protected abstract getButtonMappings(): Map<ButtonEvent, number>;\r\n  protected abstract getInputBitmask(data: DataView): number;\r\n  protected abstract getThisAsDictationDevice(): DictationDevice;\r\n}\r\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {ButtonEvent, DeviceType, DictationDeviceBase, ImplementationType,} from './dictation_device_base';\r\n\r\nconst BUTTON_MAPPINGS = new Map<ButtonEvent, number>([\r\n  [ButtonEvent.REWIND, 1 << 0],\r\n  [ButtonEvent.PLAY, 1 << 1],\r\n  [ButtonEvent.FORWARD, 1 << 2],\r\n  [ButtonEvent.EOL_PRIO, 1 << 3],\r\n]);\r\n\r\nexport class FootControlDevice extends DictationDeviceBase {\r\n  readonly implType = ImplementationType.FOOT_CONTROL;\r\n\r\n  static create(hidDevice: HIDDevice) {\r\n    return new FootControlDevice(hidDevice);\r\n  }\r\n\r\n  getDeviceType(): DeviceType {\r\n    if (this.hidDevice.vendorId === 0x0911) {\r\n      if (this.hidDevice.productId === 0x1844) {\r\n        return DeviceType.FOOT_CONTROL_ACC_2310_2320;\r\n      } else if (this.hidDevice.productId === 0x091a) {\r\n        return DeviceType.FOOT_CONTROL_ACC_2330;\r\n      }\r\n      return DeviceType.UNKNOWN;\r\n    }\r\n    return DeviceType.UNKNOWN;\r\n  }\r\n\r\n  protected getButtonMappings(): Map<ButtonEvent, number> {\r\n    return BUTTON_MAPPINGS;\r\n  }\r\n\r\n  protected getInputBitmask(data: DataView): number {\r\n    return data.getUint8(0);\r\n  }\r\n\r\n  protected getThisAsDictationDevice(): FootControlDevice {\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {ButtonEvent, DeviceType, DictationDeviceBase, ImplementationType,} from './dictation_device_base';\r\n\r\nexport enum LedStatePM3 {\r\n  OFF = 0,\r\n  RED = 1,\r\n  GREEN = 2,\r\n}\r\n\r\nconst BUTTON_MAPPINGS = new Map<ButtonEvent, number>([\r\n  [ButtonEvent.TRANSCRIBE, 1 << 0],\r\n  [ButtonEvent.TAB_BACKWARD, 1 << 1],\r\n  [ButtonEvent.RECORD, 1 << 2],\r\n  [ButtonEvent.TAB_FORWARD, 1 << 3],\r\n  [ButtonEvent.REWIND, 1 << 4],\r\n  [ButtonEvent.FORWARD, 1 << 5],\r\n  [ButtonEvent.PLAY, 1 << 6],\r\n  [ButtonEvent.CUSTOM_LEFT, 1 << 7],\r\n  [ButtonEvent.ENTER_SELECT, 1 << 8],\r\n  [ButtonEvent.CUSTOM_RIGHT, 1 << 9],\r\n]);\r\n\r\nexport class PowerMic3Device extends DictationDeviceBase {\r\n  readonly implType = ImplementationType.POWERMIC_3;\r\n\r\n  static create(hidDevice: HIDDevice) {\r\n    return new PowerMic3Device(hidDevice);\r\n  }\r\n\r\n  getDeviceType(): DeviceType {\r\n    return DeviceType.POWERMIC_3;\r\n  }\r\n\r\n  async setLed(state: LedStatePM3) {\r\n    const data = new Uint8Array([state]);\r\n    await this.hidDevice.sendReport(/* reportId= */ 0, data);\r\n  }\r\n\r\n  protected getButtonMappings(): Map<ButtonEvent, number> {\r\n    return BUTTON_MAPPINGS;\r\n  }\r\n\r\n  protected getInputBitmask(data: DataView): number {\r\n    return data.getUint16(1, /* littleEndian= */ true);\r\n  }\r\n\r\n  protected getThisAsDictationDevice(): PowerMic3Device {\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {ButtonEvent, DeviceType, DictationDeviceBase, ImplementationType,} from './dictation_device_base';\r\n\r\nconst BUTTON_MAPPINGS_SPEECHMIKE = new Map<ButtonEvent, number>([\r\n  [ButtonEvent.REWIND, 1 << 0],\r\n  [ButtonEvent.PLAY, 1 << 1],\r\n  [ButtonEvent.FORWARD, 1 << 2],\r\n  [ButtonEvent.INS_OVR, 1 << 4],\r\n  [ButtonEvent.RECORD, 1 << 5],\r\n  [ButtonEvent.COMMAND, 1 << 6],\r\n  [ButtonEvent.INSTR, 1 << 9],\r\n  [ButtonEvent.F1_A, 1 << 10],\r\n  [ButtonEvent.F2_B, 1 << 11],\r\n  [ButtonEvent.F3_C, 1 << 12],\r\n  [ButtonEvent.F4_D, 1 << 13],\r\n  [ButtonEvent.EOL_PRIO, 1 << 14],\r\n]);\r\n\r\nconst BUTTON_MAPPINGS_POWERMIC_4 = new Map<ButtonEvent, number>([\r\n  [ButtonEvent.TAB_BACKWARD, 1 << 0],\r\n  [ButtonEvent.PLAY, 1 << 1],\r\n  [ButtonEvent.TAB_FORWARD, 1 << 2],\r\n  [ButtonEvent.FORWARD, 1 << 4],\r\n  [ButtonEvent.RECORD, 1 << 5],\r\n  [ButtonEvent.COMMAND, 1 << 6],\r\n  [ButtonEvent.ENTER_SELECT, 1 << 9],\r\n  [ButtonEvent.F1_A, 1 << 10],\r\n  [ButtonEvent.F2_B, 1 << 11],\r\n  [ButtonEvent.F3_C, 1 << 12],\r\n  [ButtonEvent.F4_D, 1 << 13],\r\n  [ButtonEvent.REWIND, 1 << 14],\r\n]);\r\n\r\nexport class SpeechMikeGamepadDevice extends DictationDeviceBase {\r\n  readonly implType = ImplementationType.SPEECHMIKE_GAMEPAD;\r\n\r\n  static create(hidDevice: HIDDevice) {\r\n    return new SpeechMikeGamepadDevice(hidDevice);\r\n  }\r\n\r\n  getDeviceType(): DeviceType {\r\n    // All SpeechMikes have the same productId (except PowerMic IV) and the lfh\r\n    // is only available on the SpeechMikeHidDevice. Since this device is only\r\n    // used as proxy within a SpeechMikeHidDevice, we don't really care about\r\n    // the type here.\r\n    return DeviceType.UNKNOWN;\r\n  }\r\n\r\n  protected getButtonMappings(): Map<ButtonEvent, number> {\r\n    if (this.hidDevice.vendorId === 0x0554 &&\r\n        this.hidDevice.productId === 0x0064) {\r\n      return BUTTON_MAPPINGS_POWERMIC_4;\r\n    }\r\n    return BUTTON_MAPPINGS_SPEECHMIKE;\r\n  }\r\n\r\n  protected getInputBitmask(data: DataView): number {\r\n    return data.getUint16(0, /* littleEndian= */ true);\r\n  }\r\n\r\n  protected getThisAsDictationDevice(): SpeechMikeGamepadDevice {\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {DictationDevice} from './dictation_device';\r\nimport {ButtonEvent, DeviceType, DictationDeviceBase, ImplementationType,} from './dictation_device_base';\r\nimport {SpeechMikeGamepadDevice} from './speechmike_gamepad_device';\r\n\r\nexport enum EventMode {\r\n  HID = 0,\r\n  KEYBOARD = 1,\r\n  BROWSER = 2,\r\n  WINDOWS_SR = 3,\r\n  DRAGON_FOR_MAC = 4,\r\n  DRAGON_FOR_WINDOWS = 5,\r\n}\r\n\r\nexport enum SimpleLedState {\r\n  OFF = 0,\r\n  RECORD_INSERT = 1,\r\n  RECORD_OVERWRITE = 2,\r\n  RECORD_STANDBY_INSERT = 3,\r\n  RECORD_STANDBY_OVERWRITE = 4,\r\n}\r\n\r\nexport enum LedIndex {\r\n  RECORD_LED_GREEN = 0,\r\n  RECORD_LED_RED = 1,\r\n  INSTRUCTION_LED_GREEN = 2,\r\n  INSTRUCTION_LED_RED = 3,\r\n  INS_OWR_BUTTON_LED_GREEN = 4,\r\n  INS_OWR_BUTTON_LED_RED = 5,\r\n  F1_BUTTON_LED = 6,\r\n  F2_BUTTON_LED = 7,\r\n  F3_BUTTON_LED = 8,\r\n  F4_BUTTON_LED = 9,\r\n}\r\n\r\nexport enum LedMode {\r\n  OFF = 0,\r\n  BLINK_SLOW = 1,\r\n  BLINK_FAST = 2,\r\n  ON = 3,\r\n}\r\n\r\nexport type LedState = Record<LedIndex, LedMode>;\r\n\r\nexport enum MotionEvent {\r\n  PICKED_UP = 0,\r\n  LAYED_DOWN = 1,\r\n}\r\n\r\nexport type MotionEventListener =\r\n    (device: DictationDevice, event: MotionEvent) => void|Promise<void>;\r\n\r\nenum Command {\r\n  SET_LED = 0x02,\r\n  SET_EVENT_MODE = 0x0d,\r\n  BUTTON_PRESS_EVENT = 0x80,\r\n  IS_SPEECHMIKE_PREMIUM = 0x83,\r\n  GET_DEVICE_CODE_SM3 = 0x87,\r\n  GET_DEVICE_CODE_SMP = 0x8b,\r\n  GET_DEVICE_CODE_SO = 0x96,\r\n  GET_EVENT_MODE = 0x8d,\r\n  WIRELESS_STATUS_EVENT = 0x94,\r\n  MOTION_EVENT = 0x9e,\r\n}\r\n\r\nconst COMMAND_TIMEOUT_MS = 5000;\r\n\r\nconst BUTTON_MAPPINGS_SPEECHMIKE = new Map<ButtonEvent, number>([\r\n  [ButtonEvent.REWIND, 1 << 12],\r\n  [ButtonEvent.PLAY, 1 << 10],\r\n  [ButtonEvent.FORWARD, 1 << 11],\r\n  [ButtonEvent.INS_OVR, 1 << 14],\r\n  [ButtonEvent.RECORD, 1 << 8],\r\n  [ButtonEvent.COMMAND, 1 << 5],\r\n  [ButtonEvent.STOP, 1 << 9],\r\n  [ButtonEvent.INSTR, 1 << 15],\r\n  [ButtonEvent.F1_A, 1 << 1],\r\n  [ButtonEvent.F2_B, 1 << 2],\r\n  [ButtonEvent.F3_C, 1 << 3],\r\n  [ButtonEvent.F4_D, 1 << 4],\r\n  [ButtonEvent.EOL_PRIO, 1 << 13],\r\n  [ButtonEvent.SCAN_END, 1 << 0],\r\n  [ButtonEvent.SCAN_SUCCESS, 1 << 7],\r\n]);\r\n\r\nconst BUTTON_MAPPINGS_POWERMIC_4 = new Map<ButtonEvent, number>([\r\n  [ButtonEvent.TAB_BACKWARD, 1 << 12],\r\n  [ButtonEvent.PLAY, 1 << 10],\r\n  [ButtonEvent.TAB_FORWARD, 1 << 11],\r\n  [ButtonEvent.FORWARD, 1 << 14],\r\n  [ButtonEvent.RECORD, 1 << 8],\r\n  [ButtonEvent.COMMAND, 1 << 5],\r\n  [ButtonEvent.ENTER_SELECT, 1 << 15],\r\n  [ButtonEvent.F1_A, 1 << 1],\r\n  [ButtonEvent.F2_B, 1 << 2],\r\n  [ButtonEvent.F3_C, 1 << 3],\r\n  [ButtonEvent.F4_D, 1 << 4],\r\n  [ButtonEvent.REWIND, 1 << 13],\r\n]);\r\n\r\nconst LED_STATE_OFF: Readonly<LedState> = Object.freeze({\r\n  [LedIndex.RECORD_LED_GREEN]: LedMode.OFF,\r\n  [LedIndex.RECORD_LED_RED]: LedMode.OFF,\r\n  [LedIndex.INSTRUCTION_LED_GREEN]: LedMode.OFF,\r\n  [LedIndex.INSTRUCTION_LED_RED]: LedMode.OFF,\r\n  [LedIndex.INS_OWR_BUTTON_LED_GREEN]: LedMode.OFF,\r\n  [LedIndex.INS_OWR_BUTTON_LED_RED]: LedMode.OFF,\r\n  [LedIndex.F1_BUTTON_LED]: LedMode.OFF,\r\n  [LedIndex.F2_BUTTON_LED]: LedMode.OFF,\r\n  [LedIndex.F3_BUTTON_LED]: LedMode.OFF,\r\n  [LedIndex.F4_BUTTON_LED]: LedMode.OFF,\r\n});\r\n\r\nconst LED_STATE_RECORD_INSERT: Readonly<LedState> = Object.freeze({\r\n  ...LED_STATE_OFF,\r\n  [LedIndex.RECORD_LED_GREEN]: LedMode.ON,\r\n  [LedIndex.INS_OWR_BUTTON_LED_GREEN]: LedMode.ON,\r\n});\r\n\r\nconst LED_STATE_RECORD_OVERWRITE: Readonly<LedState> = Object.freeze({\r\n  ...LED_STATE_OFF,\r\n  [LedIndex.RECORD_LED_RED]: LedMode.ON,\r\n});\r\n\r\nconst LED_STATE_RECORD_STANDBY_INSERT: Readonly<LedState> = Object.freeze({\r\n  ...LED_STATE_OFF,\r\n  [LedIndex.RECORD_LED_GREEN]: LedMode.BLINK_SLOW,\r\n  [LedIndex.INS_OWR_BUTTON_LED_GREEN]: LedMode.BLINK_SLOW,\r\n});\r\n\r\nconst LED_STATE_RECORD_STANDBY_OVERWRITE: Readonly<LedState> = Object.freeze({\r\n  ...LED_STATE_OFF,\r\n  [LedIndex.RECORD_LED_RED]: LedMode.BLINK_SLOW,\r\n});\r\n\r\nconst SIMPLE_LED_STATES: Readonly<Record<SimpleLedState, Readonly<LedState>>> =\r\n    Object.freeze({\r\n      [SimpleLedState.OFF]: LED_STATE_OFF,\r\n      [SimpleLedState.RECORD_INSERT]: LED_STATE_RECORD_INSERT,\r\n      [SimpleLedState.RECORD_OVERWRITE]: LED_STATE_RECORD_OVERWRITE,\r\n      [SimpleLedState.RECORD_STANDBY_INSERT]: LED_STATE_RECORD_STANDBY_INSERT,\r\n      [SimpleLedState.RECORD_STANDBY_OVERWRITE]:\r\n          LED_STATE_RECORD_STANDBY_OVERWRITE,\r\n    });\r\n\r\nconst PHI_SLIDERS = Object.freeze([\r\n  DeviceType.SPEECHMIKE_LFH_3220, DeviceType.SPEECHMIKE_LFH_3520,\r\n  DeviceType.SPEECHMIKE_SMP_3720\r\n]);\r\nconst INT_SLIDERS = Object.freeze([\r\n  DeviceType.SPEECHMIKE_LFH_3210, DeviceType.SPEECHMIKE_LFH_3310,\r\n  DeviceType.SPEECHMIKE_LFH_3510, DeviceType.SPEECHMIKE_LFH_3610,\r\n  DeviceType.SPEECHMIKE_SMP_3710, DeviceType.SPEECHMIKE_SMP_3810,\r\n  DeviceType.SPEECHMIKE_SMP_4010\r\n]);\r\n\r\nexport class SpeechMikeHidDevice extends DictationDeviceBase {\r\n  readonly implType = ImplementationType.SPEECHMIKE_HID;\r\n\r\n  protected deviceCode = 0;\r\n  protected ledState: LedState = {...LED_STATE_OFF};\r\n  protected sliderBitsFilter = 0;\r\n  protected lastSliderValue = 0;\r\n  protected lastButtonValue = 0;\r\n\r\n  protected commandResolvers = new Map<Command, (data: DataView) => void>();\r\n  protected commandTimeouts = new Map<Command, number>();\r\n\r\n  protected readonly motionEventListeners = new Set<MotionEventListener>();\r\n\r\n  protected proxyDevice: SpeechMikeGamepadDevice|undefined = undefined;\r\n\r\n  static create(hidDevice: HIDDevice) {\r\n    return new SpeechMikeHidDevice(hidDevice);\r\n  }\r\n\r\n  override async init() {\r\n    await super.init();\r\n    await this.fetchDeviceCode();\r\n    this.determineSliderBitsFilter();\r\n  }\r\n\r\n  override async shutdown() {\r\n    await super.shutdown();\r\n\r\n    if (this.proxyDevice !== undefined) {\r\n      await this.proxyDevice.shutdown();\r\n    }\r\n  }\r\n\r\n  addMotionEventListener(listener: MotionEventListener) {\r\n    this.motionEventListeners.add(listener);\r\n  }\r\n\r\n  getDeviceCode(): number {\r\n    return this.deviceCode;\r\n  }\r\n\r\n  getDeviceType(): DeviceType {\r\n    if (this.hidDevice.vendorId === 0x0554) {\r\n      if (this.hidDevice.productId === 0x0064) {\r\n        return DeviceType.POWERMIC_4;\r\n      }\r\n      return DeviceType.UNKNOWN;\r\n    } else if (this.hidDevice.vendorId === 0x0911) {\r\n      return this.deviceCode;\r\n    }\r\n    return DeviceType.UNKNOWN;\r\n  }\r\n\r\n  async setSimpleLedState(simpleLedState: SimpleLedState) {\r\n    this.ledState = {...SIMPLE_LED_STATES[simpleLedState]};\r\n    await this.sendLedState();\r\n  }\r\n\r\n  async setLed(index: LedIndex, mode: LedMode) {\r\n    this.ledState[index] = mode;\r\n    await this.sendLedState();\r\n  }\r\n\r\n  protected async sendLedState() {\r\n    const input = [0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    input[5] |= this.ledState[LedIndex.RECORD_LED_GREEN] << 0;\r\n    input[5] |= this.ledState[LedIndex.RECORD_LED_RED] << 2;\r\n    input[5] |= this.ledState[LedIndex.INSTRUCTION_LED_GREEN] << 4;\r\n    input[5] |= this.ledState[LedIndex.INSTRUCTION_LED_RED] << 6;\r\n\r\n    input[6] |= this.ledState[LedIndex.INS_OWR_BUTTON_LED_GREEN] << 4;\r\n    input[6] |= this.ledState[LedIndex.INS_OWR_BUTTON_LED_RED] << 6;\r\n\r\n    input[7] |= this.ledState[LedIndex.F4_BUTTON_LED] << 0;\r\n    input[7] |= this.ledState[LedIndex.F3_BUTTON_LED] << 2;\r\n    input[7] |= this.ledState[LedIndex.F2_BUTTON_LED] << 4;\r\n    input[7] |= this.ledState[LedIndex.F1_BUTTON_LED] << 6;\r\n    await this.sendCommand(Command.SET_LED, input);\r\n  }\r\n\r\n  // See comment in DictationDeviceManager\r\n  assignProxyDevice(proxyDevice: SpeechMikeGamepadDevice) {\r\n    if (this.proxyDevice !== undefined) {\r\n      throw new Error(\r\n          'Proxy device already assigned. Adding multiple SpeechMikes in Browser/Gamepad mode at the same time is not supported.');\r\n    }\r\n    this.proxyDevice = proxyDevice;\r\n    this.proxyDevice.addButtonEventListener(\r\n        (_device: DictationDevice, bitMask: ButtonEvent) =>\r\n            this.onProxyButtonEvent(bitMask));\r\n  }\r\n\r\n  // See comment in DictationDeviceManager\r\n  protected async onProxyButtonEvent(bitMask: ButtonEvent) {\r\n    await Promise.all([...this.buttonEventListeners].map(\r\n        listener => listener(this.getThisAsDictationDevice(), bitMask)));\r\n  }\r\n\r\n  protected async handleCommandResponse(command: Command, data: DataView) {\r\n    const resolve = this.commandResolvers.get(command);\r\n    if (resolve === undefined) {\r\n      throw new Error(`Unexpected response for command ${command}`);\r\n    }\r\n    resolve(data);\r\n  }\r\n\r\n  async getEventMode(): Promise<EventMode> {\r\n    const response =\r\n        await this.sendCommandAndWaitForResponse(Command.GET_EVENT_MODE);\r\n    const eventMode = response.getInt8(8);\r\n    return eventMode;\r\n  }\r\n\r\n  async setEventMode(eventMode: EventMode) {\r\n    const input = [0, 0, 0, 0, 0, 0, 0, eventMode];\r\n    await this.sendCommand(Command.SET_EVENT_MODE, input);\r\n  }\r\n\r\n  protected async fetchDeviceCode() {\r\n    let response =\r\n        await this.sendCommandAndWaitForResponse(Command.IS_SPEECHMIKE_PREMIUM);\r\n\r\n    if (response.getUint8(8) & 0x80) {\r\n      // SpeechMike Premium or later. Let´s check whether it´s a SpeechOne,\r\n      // or get the device code otherwise\r\n      response =\r\n          await this.sendCommandAndWaitForResponse(Command.GET_DEVICE_CODE_SMP);\r\n\r\n      if (response.getUint8(1)) {\r\n        // SpeechOne or later. We look for the device code somewhere else\r\n        response = await this.sendCommandAndWaitForResponse(\r\n            Command.GET_DEVICE_CODE_SO);\r\n        // get SpeechOne device code\r\n        this.deviceCode = response.getUint16(7);\r\n\r\n      } else {\r\n        // get SpeechMike Premium/Touch/Air device code\r\n        const smpaCode = response.getUint16(2);\r\n        const smptCode = response.getUint16(4);\r\n        const smpCode = response.getUint16(6);\r\n\r\n        this.deviceCode = Math.max(smpCode, smptCode, smpaCode);\r\n      }\r\n    } else {\r\n      response =\r\n          await this.sendCommandAndWaitForResponse(Command.GET_DEVICE_CODE_SM3);\r\n      // get SpeechMike 3 device code\r\n      this.deviceCode = response.getUint16(7);\r\n    }\r\n  }\r\n\r\n  protected determineSliderBitsFilter() {\r\n    if (PHI_SLIDERS.includes(this.deviceCode)) {\r\n      this.sliderBitsFilter = ButtonEvent.FORWARD + ButtonEvent.STOP +\r\n          ButtonEvent.PLAY + ButtonEvent.REWIND;\r\n    } else if (INT_SLIDERS.includes(this.deviceCode)) {\r\n      // INT slider\r\n      this.sliderBitsFilter = ButtonEvent.RECORD + ButtonEvent.STOP +\r\n          ButtonEvent.PLAY + ButtonEvent.REWIND;\r\n    }\r\n  }\r\n\r\n  protected override async onInputReport(event: HIDInputReportEvent) {\r\n    const data = event.data;\r\n    const command = data.getUint8(0);\r\n\r\n    if (command === Command.BUTTON_PRESS_EVENT) {\r\n      await this.handleButtonPress(data);\r\n    } else if (command === Command.MOTION_EVENT) {\r\n      await this.handleMotionEvent(data);\r\n    } else if (command === Command.WIRELESS_STATUS_EVENT) {\r\n      // Do nothing\r\n      // Bytes 5 & 6 contain information about wireless/battery/charging state.\r\n    } else if (this.commandResolvers.get(command) !== undefined) {\r\n      await this.handleCommandResponse(command, data);\r\n    } else {\r\n      throw new Error(`Unhandled input report from command ${command}`);\r\n    }\r\n  }\r\n\r\n  protected getButtonMappings(): Map<ButtonEvent, number> {\r\n    if (this.hidDevice.vendorId === 0x0554 &&\r\n        this.hidDevice.productId === 0x0064) {\r\n      return BUTTON_MAPPINGS_POWERMIC_4;\r\n    }\r\n    return BUTTON_MAPPINGS_SPEECHMIKE;\r\n  }\r\n\r\n  protected getInputBitmask(data: DataView): number {\r\n    return data.getUint16(7, /* littleEndian= */ true);\r\n  }\r\n\r\n  protected getThisAsDictationDevice(): SpeechMikeHidDevice {\r\n    return this;\r\n  }\r\n\r\n  protected async handleMotionEvent(data: DataView) {\r\n    const inputBitMask = data.getUint8(8);\r\n    const motionEvent =\r\n        inputBitMask === 1 ? MotionEvent.LAYED_DOWN : MotionEvent.PICKED_UP;\r\n\r\n    await Promise.all([...this.motionEventListeners].map(\r\n        listener => listener(this.getThisAsDictationDevice(), motionEvent)));\r\n  }\r\n\r\n  protected async sendCommand(command: Command, input?: number[]) {\r\n    const data = input === undefined ? new Uint8Array([command]) :\r\n                                       new Uint8Array([command, ...input]);\r\n    await this.hidDevice.sendReport(/* reportId= */ 0, data);\r\n  }\r\n\r\n  protected async sendCommandAndWaitForResponse(\r\n      command: Command, input?: number[]): Promise<DataView> {\r\n    if (this.commandResolvers.has(command) ||\r\n        this.commandTimeouts.has(command)) {\r\n      throw new Error(`Command ${command} is already running`);\r\n    }\r\n\r\n    const responsePromise = new Promise<DataView>(resolve => {\r\n      this.commandResolvers.set(command, resolve);\r\n      this.sendCommand(command, input);\r\n    });\r\n    const timeoutPromise = new Promise<undefined>(resolve => {\r\n      const timeoutId = window.setTimeout(() => {\r\n        resolve(undefined);\r\n      }, COMMAND_TIMEOUT_MS);\r\n      this.commandTimeouts.set(command, timeoutId);\r\n    });\r\n\r\n    const result = await Promise.race([responsePromise, timeoutPromise]);\r\n\r\n    this.commandResolvers.delete(command);\r\n    this.commandTimeouts.delete(command);\r\n\r\n    if (result === undefined) {\r\n      throw new Error(\r\n          `Command ${command} timed out after ${COMMAND_TIMEOUT_MS}ms`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // For slider SpeechMikes the slider position is always added to any\r\n  // non-slider button event (2 bits set in the bitmask in this case). We\r\n  // don´t need that, so we unset the slider position bit\r\n  protected override filterOutputBitMask(outputBitMask: number): number {\r\n    // Return unfiltered bitmask if the device is not a slider device.\r\n    if (!this.sliderBitsFilter) return outputBitMask;\r\n\r\n    const buttonBitsFilter = ~this.sliderBitsFilter;\r\n\r\n    const sliderValue = outputBitMask & this.sliderBitsFilter;\r\n    const buttonValue = outputBitMask & buttonBitsFilter;\r\n\r\n    const sliderChanged = sliderValue !== this.lastSliderValue;\r\n    const buttonChanged = buttonValue !== this.lastButtonValue;\r\n\r\n    this.lastSliderValue = sliderValue;\r\n    this.lastButtonValue = buttonValue;\r\n\r\n    if (sliderChanged && buttonChanged) {\r\n      // This can only happen with the first button event, in which case we only\r\n      // care about the button event.\r\n      return outputBitMask & buttonBitsFilter;\r\n    } else if (sliderChanged) {\r\n      // Only return slider bits\r\n      return outputBitMask & this.sliderBitsFilter;\r\n    } else if (buttonChanged) {\r\n      // Only return button bits\r\n      return outputBitMask & buttonBitsFilter;\r\n    }\r\n\r\n    return outputBitMask;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {DictationDevice} from './dictation_device';\r\nimport {ButtonEventListener, ImplementationType} from './dictation_device_base';\r\nimport {FootControlDevice} from './foot_control_device';\r\nimport {PowerMic3Device} from './powermic_3_device';\r\nimport {SpeechMikeGamepadDevice} from './speechmike_gamepad_device';\r\nimport {MotionEventListener, SpeechMikeHidDevice,} from './speechmike_hid_device';\r\n\r\ntype DeviceEventListener = (device: DictationDevice) => void|Promise<void>;\r\n\r\nconst DEVICE_FILTERS: Readonly<\r\n    Record<ImplementationType, ReadonlyArray<HIDDeviceFilter>>> =\r\n    Object.freeze({\r\n      [ImplementationType.SPEECHMIKE_HID]: Object.freeze([\r\n        // Wired SpeechMikes (LFH35xx, LFH36xx, SMP37xx, SMP38xx) in HID mode\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x0c1c, usagePage: 65440, usage: 1}),\r\n        // SpeechMike Premium Air (SMP40xx) in HID mode\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x0c1d, usagePage: 65440, usage: 1}),\r\n        // SpeechOne (PSM6000) in HID or Browser/Gamepad mode\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x0c1e, usagePage: 65440, usage: 1}),\r\n        // All SpeechMikes in Browser/Gamepad mode\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x0fa0, usagePage: 65440, usage: 1}),\r\n        // PowerMic IV in HID or Browser/Gamepad mode\r\n        Object.freeze(\r\n            {vendorId: 0x0554, productId: 0x0064, usagePage: 65440, usage: 1}),\r\n      ]),\r\n      [ImplementationType.SPEECHMIKE_GAMEPAD]: Object.freeze([\r\n        // All SpeechMikes in Browser/Gamepad mode\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x0fa0, usagePage: 1, usage: 4}),\r\n        // SpeechOne (PSM6000) in Browser/Gamepad mode\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x0c1e, usagePage: 1, usage: 4}),\r\n        // PowerMic IV in Browser/Gamepad mode\r\n        Object.freeze(\r\n            {vendorId: 0x0554, productId: 0x0064, usagePage: 1, usage: 4}),\r\n      ]),\r\n      [ImplementationType.FOOT_CONTROL]: Object.freeze([\r\n        // 3-pedal Foot control ACC2310/2320\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x1844, usagePage: 1, usage: 4}),\r\n        // 4-pedal Foot control ACC2330\r\n        Object.freeze(\r\n            {vendorId: 0x0911, productId: 0x091a, usagePage: 1, usage: 4}),\r\n      ]),\r\n      [ImplementationType.POWERMIC_3]: Object.freeze([\r\n        // PowerMic III\r\n        Object.freeze(\r\n            {vendorId: 0x0554, productId: 0x1001, usagePage: 1, usage: 0}),\r\n      ]),\r\n    });\r\n\r\nexport class DictationDeviceManager {\r\n  protected readonly buttonEventListeners = new Set<ButtonEventListener>();\r\n  protected readonly deviceConnectEventListeners =\r\n      new Set<DeviceEventListener>();\r\n  protected readonly deviceDisconnectEventListeners =\r\n      new Set<DeviceEventListener>();\r\n  protected readonly motionEventListeners = new Set<MotionEventListener>();\r\n\r\n  protected readonly devices = new Map<HIDDevice, DictationDevice>();\r\n  protected readonly pendingProxyDevices =\r\n      new Map<HIDDevice, SpeechMikeGamepadDevice>();\r\n\r\n  protected readonly onConnectHandler = (event: HIDConnectionEvent) =>\r\n      this.onHidDeviceConnected(event);\r\n  protected readonly onDisconectHandler = (event: HIDConnectionEvent) =>\r\n      this.onHidDeviceDisconnected(event);\r\n\r\n  protected isInitialized = false;\r\n\r\n  constructor(protected readonly hidApi = navigator.hid) {\r\n    if (this.hidApi === undefined) {\r\n      throw new Error('WebHID is not available');\r\n    }\r\n  }\r\n\r\n  getDevices(): DictationDevice[] {\r\n    this.failIfNotInitialized();\r\n    return [...this.devices.values()];\r\n  }\r\n\r\n  async init() {\r\n    if (this.isInitialized) {\r\n      throw new Error('DictationDeviceManager already initialized');\r\n    }\r\n\r\n    this.hidApi.addEventListener('connect', this.onConnectHandler);\r\n    this.hidApi.addEventListener('disconnect', this.onDisconectHandler);\r\n\r\n    const hidDevices = await this.hidApi.getDevices();\r\n    await this.createAndAddInitializedDevices(hidDevices);\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  async shutdown() {\r\n    this.failIfNotInitialized();\r\n\r\n    this.hidApi.removeEventListener('connect', this.onConnectHandler);\r\n    this.hidApi.removeEventListener('disconnect', this.onDisconectHandler);\r\n\r\n    await Promise.all([\r\n      [...this.devices.values()].map(\r\n          device => device.shutdown(/*closeDevice=*/ true)),\r\n    ]);\r\n    this.devices.clear();\r\n\r\n    this.isInitialized = false;\r\n  }\r\n\r\n  async requestDevice(): Promise<Array<DictationDevice>> {\r\n    this.failIfNotInitialized();\r\n\r\n    const hidDevices = await this.hidApi.requestDevice({\r\n      filters: getFilters(),\r\n    });\r\n\r\n    const devices = await this.createAndAddInitializedDevices(hidDevices);\r\n    return devices;\r\n  }\r\n\r\n  addButtonEventListener(listener: ButtonEventListener) {\r\n    this.buttonEventListeners.add(listener);\r\n  }\r\n\r\n  addDeviceConnectedEventListener(listener: DeviceEventListener) {\r\n    this.deviceConnectEventListeners.add(listener);\r\n  }\r\n\r\n  addDeviceDisconnectedEventListener(listener: DeviceEventListener) {\r\n    this.deviceDisconnectEventListeners.add(listener);\r\n  }\r\n\r\n  addMotionEventListener(listener: MotionEventListener) {\r\n    this.motionEventListeners.add(listener);\r\n  }\r\n\r\n  protected failIfNotInitialized() {\r\n    if (!this.isInitialized) {\r\n      throw new Error('DictationDeviceManager not yet initialized');\r\n    }\r\n  }\r\n\r\n  protected async createAndAddInitializedDevices(hidDevices: HIDDevice[]):\r\n      Promise<Array<DictationDevice>> {\r\n    const devices = await Promise.all(\r\n        hidDevices.map(hidDevice => this.createDevice(hidDevice)));\r\n\r\n    const result: DictationDevice[] = [];\r\n    for (const device of devices) {\r\n      if (device === undefined) continue;\r\n\r\n      try {\r\n        await device.init();\r\n      } catch (e: unknown) {\r\n        await device.shutdown();\r\n        console.error('failed to initialize device', e);\r\n        continue;\r\n      }\r\n\r\n      // Handle proxy device\r\n      if (device.implType === ImplementationType.SPEECHMIKE_GAMEPAD) {\r\n        this.pendingProxyDevices.set(device.hidDevice, device);\r\n        continue;\r\n      }\r\n\r\n      // Handle host device\r\n      this.addListeners(device);\r\n      this.devices.set(device.hidDevice, device);\r\n      result.push(device);\r\n    }\r\n\r\n    this.assignPendingProxyDevices();\r\n\r\n    return result;\r\n  }\r\n\r\n  protected async createDevice(hidDevice: HIDDevice):\r\n      Promise<DictationDevice|undefined> {\r\n    // Don't recreate devices for known devices.\r\n    if (this.devices.has(hidDevice)) return undefined;\r\n\r\n    const implType = getImplType(hidDevice);\r\n    if (implType === undefined) return undefined;\r\n    switch (implType) {\r\n      case ImplementationType.SPEECHMIKE_HID:\r\n        return SpeechMikeHidDevice.create(hidDevice);\r\n      case ImplementationType.POWERMIC_3:\r\n        return PowerMic3Device.create(hidDevice);\r\n      case ImplementationType.SPEECHMIKE_GAMEPAD:\r\n        return SpeechMikeGamepadDevice.create(hidDevice);\r\n      case ImplementationType.FOOT_CONTROL:\r\n        return FootControlDevice.create(hidDevice);\r\n      default:\r\n        checkExhaustive(implType);\r\n    }\r\n  }\r\n\r\n  protected assignPendingProxyDevices() {\r\n    for (const [proxyHidDevice, proxyDevice] of this.pendingProxyDevices) {\r\n      // Find matching host and assign\r\n      for (const hostDevice of this.devices.values()) {\r\n        if (hostDevice.implType !== ImplementationType.SPEECHMIKE_HID) {\r\n          continue;\r\n        }\r\n        const hostHidDevice = hostDevice.hidDevice;\r\n        if (proxyHidDevice.vendorId !== hostHidDevice.vendorId ||\r\n            proxyHidDevice.productId !== hostHidDevice.productId) {\r\n          continue;\r\n        }\r\n        hostDevice.assignProxyDevice(proxyDevice);\r\n        this.pendingProxyDevices.delete(proxyHidDevice);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected addListeners(device: DictationDevice) {\r\n    for (const listener of this.buttonEventListeners) {\r\n      device.addButtonEventListener(listener);\r\n    }\r\n\r\n    if (device.implType === ImplementationType.SPEECHMIKE_HID) {\r\n      for (const listener of this.motionEventListeners) {\r\n        device.addMotionEventListener(listener);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected async onHidDeviceConnected(event: HIDConnectionEvent) {\r\n    const hidDevice = event.device;\r\n    const devices = await this.createAndAddInitializedDevices([hidDevice]);\r\n    const device = devices[0];\r\n    if (device === undefined) return;\r\n\r\n    await Promise.all([...this.deviceConnectEventListeners].map(\r\n        listener => listener(device)));\r\n  }\r\n\r\n  protected async onHidDeviceDisconnected(event: HIDConnectionEvent) {\r\n    const hidDevice = event.device;\r\n    this.pendingProxyDevices.delete(hidDevice);\r\n    const device = this.devices.get(hidDevice);\r\n    if (device === undefined) return;\r\n\r\n    await device.shutdown(/*closeDevice=*/ false);\r\n\r\n    await Promise.all([...this.deviceDisconnectEventListeners].map(\r\n        listener => listener(device)));\r\n\r\n    this.devices.delete(hidDevice);\r\n  }\r\n}\r\n\r\nfunction getFilters(): HIDDeviceFilter[] {\r\n  const filters: HIDDeviceFilter[] = [];\r\n  for (const implType of Object.values(ImplementationType)) {\r\n    if (typeof implType === 'string') continue;\r\n    const filtersForImplType = DEVICE_FILTERS[implType];\r\n    filters.push(...filtersForImplType);\r\n  }\r\n  return filters;\r\n}\r\n\r\nfunction getImplType(hidDevice: HIDDevice): ImplementationType|undefined {\r\n  for (const implType of Object.values(ImplementationType)) {\r\n    if (typeof implType === 'string') continue;\r\n    const filtersForImplType = DEVICE_FILTERS[implType];\r\n    if (deviceMatchesFilters(hidDevice, filtersForImplType)) return implType;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction deviceMatchesFilters(\r\n    hidDevice: HIDDevice, filters: ReadonlyArray<HIDDeviceFilter>): boolean {\r\n  return filters.some(filter => deviceMatchesFilter(hidDevice, filter));\r\n}\r\n\r\nfunction deviceMatchesFilter(\r\n    hidDevice: HIDDevice, filter: Readonly<HIDDeviceFilter>): boolean {\r\n  if (filter.vendorId !== undefined && hidDevice.vendorId !== filter.vendorId)\r\n    return false;\r\n  if (filter.productId !== undefined &&\r\n      hidDevice.productId !== filter.productId)\r\n    return false;\r\n\r\n  if (filter.usagePage !== undefined) {\r\n    if (hidDevice.collections === undefined ||\r\n        hidDevice.collections.every(\r\n            collection => collection.usagePage !== filter.usagePage)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (filter.usage !== undefined) {\r\n    if (hidDevice.collections === undefined ||\r\n        hidDevice.collections.every(\r\n            collection => collection.usage !== filter.usage)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction checkExhaustive(arg: never): never {\r\n  throw new Error(`Unexpected input: ${arg}`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport {ButtonEvent as ButtonEvent_, DeviceType as DeviceType_, ImplementationType as ImplementationType_,} from './dictation_device_base';\r\nimport {DictationDeviceManager as DictationDeviceManager_} from './dictation_device_manager';\r\nimport {FootControlDevice as FootControlDevice_} from './foot_control_device';\r\nimport {LedStatePM3 as LedStatePM3_, PowerMic3Device as PowerMic3Device_,} from './powermic_3_device';\r\nimport {SpeechMikeGamepadDevice as SpeechMikeGamepadDevice_} from './speechmike_gamepad_device';\r\nimport {EventMode as EventMode_, LedIndex as LedIndex_, LedMode as LedMode_, MotionEvent as MotionEvent_, SimpleLedState as SimpleLedState_,} from './speechmike_hid_device';\r\n\r\nexport namespace DictationSupport {\r\n  // dictation_device_base.ts\r\n  export const ImplementationType = ImplementationType_;\r\n  export const DeviceType = DeviceType_;\r\n  export const ButtonEvent = ButtonEvent_;\r\n\r\n  // dictation_device_manager.ts\r\n  export const DictationDeviceManager = DictationDeviceManager_;\r\n\r\n  // foot_control_device.ts\r\n  export const FootControlDevice = FootControlDevice_;\r\n\r\n  // powermic_3_device.ts\r\n  export const LedStatePM3 = LedStatePM3_;\r\n  export const PowerMic3Device = PowerMic3Device_;\r\n\r\n  // speechmike_gamepad_device.ts\r\n  export const SpeechMikeGamepadDevice = SpeechMikeGamepadDevice_;\r\n\r\n  // speechmike_hid_device.ts\r\n  export const EventMode = EventMode_;\r\n  export const SimpleLedState = SimpleLedState_;\r\n  export const LedIndex = LedIndex_;\r\n  export const LedMode = LedMode_;\r\n  export const MotionEvent = MotionEvent_;\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","a","i","self","ImplementationType","DeviceType","ButtonEvent","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","DictationDeviceBase","hidDevice","id","next_id","buttonEventListeners","Set","lastBitMask","onInputReportHandler","event","this","onInputReport","async","addEventListener","opened","open","closeDevice","removeEventListener","close","clear","addButtonEventListener","listener","add","data","handleButtonPress","buttonMappings","getButtonMappings","inputBitMask","getInputBitmask","outputBitMask","buttonEvent","buttonMapping","filterOutputBitMask","Promise","all","map","getThisAsDictationDevice","BUTTON_MAPPINGS","Map","REWIND","PLAY","FORWARD","EOL_PRIO","FootControlDevice","implType","FOOT_CONTROL","static","getDeviceType","vendorId","productId","FOOT_CONTROL_ACC_2310_2320","FOOT_CONTROL_ACC_2330","UNKNOWN","getUint8","LedStatePM3","TRANSCRIBE","TAB_BACKWARD","RECORD","TAB_FORWARD","CUSTOM_LEFT","ENTER_SELECT","CUSTOM_RIGHT","PowerMic3Device","POWERMIC_3","state","Uint8Array","sendReport","getUint16","BUTTON_MAPPINGS_SPEECHMIKE","INS_OVR","COMMAND","INSTR","F1_A","F2_B","F3_C","F4_D","BUTTON_MAPPINGS_POWERMIC_4","SpeechMikeGamepadDevice","SPEECHMIKE_GAMEPAD","EventMode","SimpleLedState","LedIndex","LedMode","MotionEvent","Command","STOP","SCAN_END","SCAN_SUCCESS","LED_STATE_OFF","freeze","RECORD_LED_GREEN","OFF","RECORD_LED_RED","INSTRUCTION_LED_GREEN","INSTRUCTION_LED_RED","INS_OWR_BUTTON_LED_GREEN","INS_OWR_BUTTON_LED_RED","F1_BUTTON_LED","F2_BUTTON_LED","F3_BUTTON_LED","F4_BUTTON_LED","LED_STATE_RECORD_INSERT","ON","LED_STATE_RECORD_OVERWRITE","LED_STATE_RECORD_STANDBY_INSERT","BLINK_SLOW","LED_STATE_RECORD_STANDBY_OVERWRITE","SIMPLE_LED_STATES","RECORD_INSERT","RECORD_OVERWRITE","RECORD_STANDBY_INSERT","RECORD_STANDBY_OVERWRITE","PHI_SLIDERS","SPEECHMIKE_LFH_3220","SPEECHMIKE_LFH_3520","SPEECHMIKE_SMP_3720","INT_SLIDERS","SPEECHMIKE_LFH_3210","SPEECHMIKE_LFH_3310","SPEECHMIKE_LFH_3510","SPEECHMIKE_LFH_3610","SPEECHMIKE_SMP_3710","SPEECHMIKE_SMP_3810","SPEECHMIKE_SMP_4010","SpeechMikeHidDevice","SPEECHMIKE_HID","deviceCode","ledState","sliderBitsFilter","lastSliderValue","lastButtonValue","commandResolvers","commandTimeouts","motionEventListeners","proxyDevice","undefined","super","init","fetchDeviceCode","determineSliderBitsFilter","shutdown","addMotionEventListener","getDeviceCode","POWERMIC_4","simpleLedState","sendLedState","index","mode","input","sendCommand","SET_LED","assignProxyDevice","Error","_device","bitMask","onProxyButtonEvent","command","resolve","sendCommandAndWaitForResponse","GET_EVENT_MODE","getInt8","eventMode","SET_EVENT_MODE","response","IS_SPEECHMIKE_PREMIUM","GET_DEVICE_CODE_SMP","GET_DEVICE_CODE_SO","smpaCode","smptCode","smpCode","Math","max","GET_DEVICE_CODE_SM3","includes","BUTTON_PRESS_EVENT","MOTION_EVENT","handleMotionEvent","WIRELESS_STATUS_EVENT","handleCommandResponse","motionEvent","LAYED_DOWN","PICKED_UP","has","responsePromise","set","timeoutPromise","timeoutId","window","setTimeout","result","race","delete","buttonBitsFilter","sliderValue","buttonValue","sliderChanged","buttonChanged","DEVICE_FILTERS","usagePage","usage","DictationDeviceManager","constructor","hidApi","navigator","hid","deviceConnectEventListeners","deviceDisconnectEventListeners","devices","pendingProxyDevices","onConnectHandler","onHidDeviceConnected","onDisconectHandler","onHidDeviceDisconnected","isInitialized","getDevices","failIfNotInitialized","values","hidDevices","createAndAddInitializedDevices","device","requestDevice","filters","getFilters","addDeviceConnectedEventListener","addDeviceDisconnectedEventListener","createDevice","e","console","error","addListeners","push","assignPendingProxyDevices","deviceMatchesFilters","getImplType","create","arg","checkExhaustive","proxyHidDevice","hostDevice","hostHidDevice","filtersForImplType","some","filter","collections","every","collection","deviceMatchesFilter","DictationSupport"],"sourceRoot":""}